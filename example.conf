############################
# Basic Config
############################

# The address GRPC requests will listen on
GUBER_GRPC_ADDRESS=0.0.0.0:9990

# The address HTTP requests will listen on
GUBER_HTTP_ADDRESS=0.0.0.0:9980

# The address gubernator peers will connect to. Ignored if using k8s peer
# discovery method.
#
# Should be the same as GUBER_GRPC_ADDRESS unless you are running behind a NAT
# or running in a docker container without host networking.
#
# If unset, will default to the hostname or if that fails will attempt
# to guess at a non loopback interface
GUBER_ADVERTISE_ADDRESS=localhost:9990

# Max size of the cache; This is the cache that holds
# all the rate limits. The cache size will never grow
# beyond this size.
# GUBER_CACHE_SIZE=50000

# Time in seconds that the GRPC server will keep a client connection alive.
# If value is zero (default) time is infinity
# GUBER_GRPC_MAX_CONN_AGE_SEC=30

# A list of optional prometheus metric collection
# os - collect process metrics
#      See https://pkg.go.dev/github.com/prometheus/client_golang@v1.11.0/prometheus/collectors#NewProcessCollector
# golang - collect golang internal metrics
#          See https://pkg.go.dev/github.com/prometheus/client_golang@v1.11.0/prometheus/collectors#NewGoCollector
# GUBER_METRIC_FLAGS=os,golang

############################
# Log Config
############################

# Log Level, these are the log levels for logrus.
# GUBER_LOG_LEVEL=trace

# Log Format, currently supports either json or text
# GUBER_LOG_FORMAT=json


############################
# Behavior Config
############################

# How long a forwarding peer will wait for a response before timing out
#GUBER_BATCH_TIMEOUT=500ms

# The max number of requests in a single batch a node will forward to a peer
#GUBER_BATCH_LIMIT=1000

# How long a node will wait before sending a batch of requests to a peer
#GUBER_BATCH_WAIT=500ns

# How long a owning peer will wait for a response when sending GLOBAL updates to peers
#GUBER_GLOBAL_TIMEOUT=500ms

# The max number of requests in a single batch to a node when sending GLOBAL updates to peers
#GUBER_GLOBAL_BATCH_LIMIT=1000

# How long a node will wait before sending a batch of GLOBAL updates to a peer
#GUBER_GLOBAL_SYNC_WAIT=500ns


############################
# TLS Config
############################
# Path to the CA certificate. This is primarily used by gubernator
# when connecting to other gubernator peers.
# GUBER_TLS_CA=/path/to/ca.pem

# Path to the CA private key. See GUBER_TLS_AUTO for details
# GUBER_TLS_CA_KEY=/path/to/ca.key

# Path to the server certificate. Certificate used by the server/clients for TLS connections.
# GUBER_TLS_CERT=/path/to/server.pem

# Path to the server private key. This is the key for the certificate. Must be unencrypted.
# GUBER_TLS_KEY=/path/to/server.key

# If set to `true` gubernator will generate both the CA and self-signed server certificates.
# If GUBER_TLS_CA and GUBER_TLS_CA_KEY are set but no GUBER_TLS_KEY or GUBER_TLS_CERT is set
# then gubernator will generate a self-signed key using the provided GUBER_TLS_CA and
# GUBER_TLS_CA_KEY. This avoids the need to distribute a new server cert for each gubernator
# instance at the cost of distributing the CA private key. If set but no CA or TLS certs are
# provided gubernator will generate a CA and certs needed TLS.
# GUBER_TLS_AUTO=false

# Sets the minimum TLS version. If not set, defaults to 1.3
# GUBER_TLS_MIN_VERSION=1.3

# Sets the Client Authentication type as defined in the golang standard 'crypto/tls' package.
# Valid types are ('request-cert', 'verify-cert', 'require-any-cert', 'require-and-verify').
# Use `require-and-verify` to achieve secure client authentication which will apply to all
# client and gubernator peer to peer communication. If set then gubernator will attempt to
# load GUBER_TLS_CLIENT_AUTH_CA_CERT, GUBER_TLS_CLIENT_AUTH_KEY and
# GUBER_TLS_CLIENT_AUTH_CERT for use with client authentication. If not provided client
# auth will use GUBER_TLS_CA, GUBER_TLS_CERT and GUBER_TLS_KEY for client authentication.
# GUBER_TLS_CLIENT_AUTH=require-and-verify

# For use with GUBER_TLS_CLIENT_AUTH
# GUBER_TLS_CLIENT_AUTH_KEY=/path/to/client.key
# GUBER_TLS_CLIENT_AUTH_CERT=/path/to/client.pem
# GUBER_TLS_CLIENT_AUTH_CA_CERT=/path/to/client-ca.pem

# If true, TLS peer to peer clients will accept any certificate presented by the remote
# gubernator instance and any host name in that certificate.
# GUBER_TLS_INSECURE_SKIP_VERIFY=false

# Configures the tls client used to make peer GRPC requests to verify that peer certificates
# contain the specified SAN. See ServerName field of https://pkg.go.dev/crypto/tls#Config.
# Useful if your peer certificates do not contain IP SANs, but all contain a common SAN.
# GUBER_TLS_CLIENT_AUTH_SERVER_NAME=gubernator

############################
# Peer Discovery Type
############################
# Which type of peer discovery gubernator will use ('member-list', 'etcd', 'k8s')
# GUBER_PEER_DISCOVERY_TYPE=member-list


############################
# Member-List Config (GUBER_PEER_DISCOVERY_TYPE=member-list)
############################

# TODO: Add the clusterName which will identify which cluster this node is in

# The address peers will connect too. Defaults to GUBER_ADVERTISE_ADDRESS
# GUBER_MEMBERLIST_ADVERTISE_ADDRESS=localhost:81

# The address the member list will listen to in order to discover other list members.
# This should be a different port than GUBER_ADVERTISE_ADDRESS
# GUBER_MEMBERLIST_ADDRESS=localhost:7946

# This is an initial list or a single domain name that 'member-list' will connect to in order to
# begin discovering other peers.
# GUBER_MEMBERLIST_KNOWN_NODES=peer1:7946,peer2:7946,peer3:7946
# GUBER_MEMBERLIST_KNOWN_NODES=memberlist.example.com


############################
# Kubernetes Config (GUBER_PEER_DISCOVERY_TYPE=k8s)
############################

# The namespace the gubernator instances were deployed into
#GUBER_K8S_NAMESPACE=default

# Should be set to the IP of the pod the gubernator instance is running in.
# This allows gubernator to know which of the peers it discovers is it's self.
#GUBER_K8S_POD_IP=<pod-ip>

# Should be set to the port number of the pod, as defined by `containerPort` in the pod spec.
#GUBER_K8S_POD_PORT=<pod-port>

# The selector used when listing the endpoints API to find peers.
#GUBER_K8S_ENDPOINTS_SELECTOR=app=gubernator

# The mechanism by which gubernator watches for changes in k8s. (defaults to 'endpoints')
# endpoints - Watches the v1.Endpoints API for changes
# pods - Watches the v1.Pod API for changes
#GUBER_K8S_WATCH_MECHANISM=endpoints

############################
# Etcd Config (GUBER_PEER_DISCOVERY_TYPE=etcd)
############################

# A Comma separate list of etcd nodes
# GUBER_ETCD_ENDPOINTS=localhost:2379

# The address peers will connect too. Defaults to GUBER_ADVERTISE_ADDRESS
# GUBER_ETCD_ADVERTISE_ADDRESS=localhost:81

# The prefix gubernator will use to register peers under in etcd
#GUBER_ETCD_KEY_PREFIX=/gubernator-peers

# How long etcd client will wait for a response when initial dialing a node
#GUBER_ETCD_DIAL_TIMEOUT=5s

# The name of the cluster this gubernator instance is in.
# GUBER_ETCD_CLUSTER_NAME=cluster1

# Authentication
#GUBER_ETCD_USER=my-user
#GUBER_ETCD_PASSWORD=my-password

# Enables TLS config, with an empty config
#GUBER_ETCD_TLS_ENABLE=True

# Certificate file locations
#GUBER_ETCD_TLS_CERT=/path/to/cert
#GUBER_ETCD_TLS_KEY=/path/to/key
#GUBER_ETCD_TLS_CA=/path/to/ca

# Skip CERT verification
#GUBER_ETCD_TLS_SKIP_VERIFY=true


############################
# Picker Config
############################
# Choose which picker algorithm to use
# GUBER_PEER_PICKER=consistent-hash

# Choose the hash algorithm for `consistent-hash` (crc32, fnv1a, fnv1)
# GUBER_PEER_PICKER_HASH=crc32

# Choose which picker algorithm to use
# GUBER_PEER_PICKER=replicated-hash

# Choose the hash algorithm for `replicated-hash` (fnv1a, fnv1)
# GUBER_PEER_PICKER_HASH=fnv1a

# Choose the number of replications
# GUBER_REPLICATED_HASH_REPLICAS=512


############################
# Multi-Cluster Config
############################
# This config allows users who are not using a federated peer discovery method to manually
# define remote clusters with which to replicate rate limit information with. Each cluster
# defines nodes our local cluster can contact for replication. Each cluster may optionally
# have a separate TLS config. Clusters defined in `GUBER_CLUSTERS` will have a corresponding
# GUBER_CLUSTER_<cluster-name>_<config> key for specifying cluster specific configuration.

# NOTE: When using a multi-cluster config, you MUST set `GUBER_CLUSTER_NAME` to be the
# name of the local cluster this instance is apart of.

# A comma separated list of all our cluster names
# GUBER_CLUSTERS=asia,europe

# =============================
# Cluster config for 'europe'
# =============================
# Enable TLS for use with this cluster, if set to `True` then uses the same TLS config as
# defined for the local cluster via `GUBER_TLS_<config>`, unless a cluster specific TLS
# config is provided. (defaults to false)
# GUBER_CLUSTER_EUROPE_TLS_ENABLED=True

# TLS config for CA and CERT verification, See the `TLS Config` section in this example
# config file for details on these options.
# GUBER_CLUSTERS_EUROPE_TLS_CA=/path/to/ca.pem
# GUBER_CLUSTERS_EUROPE_TLS_CA_KEY=/path/to/ca.key
# GUBER_CLUSTERS_EUROPE_TLS_CERT=/path/to/server.pem
# GUBER_CLUSTERS_EUROPE_TLS_KEY=/path/to/server.key

# A comma separate list of nodes that are part of the `europe` cluster.
# GUBER_CLUSTERS_EUROPE_NODES=node2.eu-central-1:9990,node1.eu-central-1:9990

# =============================
# Cluster config for 'asia'
# =============================
# Clusters are not required to include all nodes in the remote cluster, they could instead point
# to a DNS name which load balances to a random node in the cluster. The remote cluster node
# will then distribute the replicated rate limits to all the nodes in the remote cluster.
# GUBER_CLUSTERS_ASIA_NODES=gubernator.ap-east-1:9990

# Here is an example of sharing rate limits in the US Region between two different datacenters
# using a load balancer DNS name with all nodes sharing the
# GUBER_CLUSTERS=use1,usw2

# The name of the cluster this instance is in.
# GUBER_CLUSTER_NAME=use1

# GUBER_CLUSTERS_USE1_NODES=gubernator.us-east-1.example.com:9990
# GUBER_CLUSTERS_USE1_TLS_ENABLED=True

# GUBER_CLUSTERS_USW2_NODES=gubernator.us-west-2.example.com:9990
# GUBER_CLUSTERS_USW2_TLS_ENABLED=True

############################
# Replica Groups
############################
# A Replica Group is the name of list of clusters to which rate limits can be replicated too. You must define
# a replica group before rate limit requests can be replicated to different clusters. For instance,
# you can define a replica group called `na` (short for North America) which includes clusters defined in
# both the us-east-1 and us-west-2 data centers. Once the replica group is defined, it can be referenced
# in a rate limit request.

# Defines all the available replica groups (North America, Europe, Asia Pacific)
# GUBER_REPLICA_GROUPS=na,eu,ap

# A comma separate list of clusters that make up the group
# GUBER_REPLICA_GROUPS_NA=use1,usw2
# GUBER_REPLICA_GROUPS_AP=asia
# GUBER_REPLICA_GROUPS_EU=europe
